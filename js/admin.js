document.addEventListener('DOMContentLoaded',()=>{
  const list=document.getElementById('taskList'); const cards=document.getElementById('adminCards');
  const idEl=document.getElementById('taskId'); const titleEl=document.getElementById('title'); const deadlineEl=document.getElementById('deadline'); const priorityEl=document.getElementById('priority'); const statusEl=document.getElementById('status'); const assignedToEmailEl=document.getElementById('assignedToEmail'); const descEl=document.getElementById('description'); const formTitle=document.getElementById('formTitle'); const form=document.getElementById('taskForm'); const resetBtn=document.getElementById('resetBtn');
  const searchEl=document.getElementById('search'); const fPriEl=document.getElementById('filterPriority'); const fStatEl=document.getElementById('filterStatus');
  let unsub=null;
  auth.onAuthStateChanged(async (user)=>{ if(!user) return; if(unsub) unsub(); unsub = tasksCol.orderBy('createdAt','desc').onSnapshot(snap=>render(snap), err=>alert(err.message)); });
  function render(snap){ const arr=snap.docs.map(d=>({id:d.id, ...d.data()})); renderCards(cards, arr); paintList(arr); }
  function paintList(items){ const q=searchEl.value.toLowerCase(); const fp=fPriEl.value; const fs=fStatEl.value; const tasks=items.filter(t=>{ const mQ=t.title.toLowerCase().includes(q)||(t.description||'').toLowerCase().includes(q); const mP=fp==='all'||t.priority===fp; const mS=fs==='all'||t.status===fs; return mQ&&mP&&mS; }); if(tasks.length===0){ list.innerHTML="<li class='muted'>No tasks found.</li>"; return; } list.innerHTML=tasks.map(t=>{ const isDone=t.status==='done'; const isSub=t.status==='submitted'; return `<li class="task ${isDone?'done':''}" data-id="${t.id}"><button class="checkbox" data-action="toggle">${isDone?'✓':''}</button><div class="stack"><div class="title">${t.title}</div><div class="meta">${t.deadline?('Due '+new Date(t.deadline).toLocaleDateString()):'No due date'} • <span class="badge ${priorityClass(t.priority)}">${t.priority}</span> • ${t.assignedTo||'Unassigned'} ${badgeFor(t.deadline,isDone)} ${t.status==='open'?'<span class=\'badge status-open\'>open</span>':''} ${t.status==='submitted'?'<span class=\'badge status-submitted\'>submitted</span>':''} ${t.status==='done'?'<span class=\'badge status-done\'>done</span>':''}</div>${t.description?`<p class="muted">${t.description}</p>`:''}</div><div class="row">${isSub?'<button class="btn" data-action="approve">Approve</button><button class="btn btn-ghost" data-action="reject">Reject</button>':''}<button class="btn btn-ghost" data-action="edit">Edit</button><button class="btn btn-danger" data-action="delete">Delete</button></div></li>`; }).join(''); }
  searchEl.addEventListener('input', ()=>auth.currentUser && tasksCol.get().then(()=>{})); fPriEl.addEventListener('change', ()=>auth.currentUser && tasksCol.get().then(()=>{})); fStatEl.addEventListener('change', ()=>auth.currentUser && tasksCol.get().then(()=>{}));
  list.addEventListener('click', async (e)=>{ const li=e.target.closest('li.task'); if(!li) return; const id=li.dataset.id; const act=e.target.dataset.action; const ref=tasksCol.doc(id); const snap=await ref.get(); if(!snap.exists) return; const t=snap.data(); if(act==='toggle'){ await ref.update({ status: t.status==='done'?'open':'done', updatedAt:new Date() }); return; } if(act==='delete'){ if(confirm('Delete this task?')) await ref.delete(); return; } if(act==='edit'){ idEl.value=id; titleEl.value=t.title; deadlineEl.value=toDateInputValue(t.deadline); priorityEl.value=t.priority||'medium'; statusEl.value=t.status||'open'; assignedToEmailEl.value=t.assignedTo||''; descEl.value=t.description||''; formTitle.textContent='Edit Task'; return; } if(act==='approve'){ await ref.update({ status:'done', updatedAt:new Date() }); return; } if(act==='reject'){ await ref.update({ status:'open', updatedAt:new Date() }); return; } });
  resetBtn.addEventListener('click',()=>{ idEl.value=''; form.reset(); formTitle.textContent='Create Task'; });
  form.addEventListener('submit', async (e)=>{ e.preventDefault(); const payload={ title:titleEl.value.trim(), description:descEl.value.trim(), priority:priorityEl.value, status:statusEl.value, assignedTo:assignedToEmailEl.value.trim(), createdAt:new Date(), updatedAt:new Date() }; const d=deadlineEl.value.trim(); if(d) payload.deadline=new Date(d).toISOString(); const id=idEl.value; try{ if(id){ await tasksCol.doc(id).update(payload); } else { await tasksCol.add(payload); } form.reset(); idEl.value=''; formTitle.textContent='Create Task'; }catch(err){ alert(err.message); } });
});